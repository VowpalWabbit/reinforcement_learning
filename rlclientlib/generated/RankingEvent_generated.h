// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RANKINGEVENT_REINFORCEMENT_LEARNING_MESSAGES_FLATBUFF_H_
#define FLATBUFFERS_GENERATED_RANKINGEVENT_REINFORCEMENT_LEARNING_MESSAGES_FLATBUFF_H_

#include "flatbuffers/flatbuffers.h"

namespace reinforcement_learning {
namespace messages {
namespace flatbuff {

struct RankingEvent;

struct RankingEventBatch;

struct RankingEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EVENT_ID = 4,
    VT_DEFERRED_ACTION = 6,
    VT_ACTION_IDS = 8,
    VT_CONTEXT = 10,
    VT_PROBABILITIES = 12,
    VT_MODEL_ID = 14,
    VT_PASS_PROBABILITY = 16
  };
  const flatbuffers::String *event_id() const {
    return GetPointer<const flatbuffers::String *>(VT_EVENT_ID);
  }
  bool deferred_action() const {
    return GetField<uint8_t>(VT_DEFERRED_ACTION, 0) != 0;
  }
  const flatbuffers::Vector<uint64_t> *action_ids() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_ACTION_IDS);
  }
  const flatbuffers::Vector<uint8_t> *context() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CONTEXT);
  }
  const flatbuffers::Vector<float> *probabilities() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_PROBABILITIES);
  }
  const flatbuffers::String *model_id() const {
    return GetPointer<const flatbuffers::String *>(VT_MODEL_ID);
  }
  float pass_probability() const {
    return GetField<float>(VT_PASS_PROBABILITY, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENT_ID) &&
           verifier.Verify(event_id()) &&
           VerifyField<uint8_t>(verifier, VT_DEFERRED_ACTION) &&
           VerifyOffset(verifier, VT_ACTION_IDS) &&
           verifier.Verify(action_ids()) &&
           VerifyOffset(verifier, VT_CONTEXT) &&
           verifier.Verify(context()) &&
           VerifyOffset(verifier, VT_PROBABILITIES) &&
           verifier.Verify(probabilities()) &&
           VerifyOffset(verifier, VT_MODEL_ID) &&
           verifier.Verify(model_id()) &&
           VerifyField<float>(verifier, VT_PASS_PROBABILITY) &&
           verifier.EndTable();
  }
};

struct RankingEventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_event_id(flatbuffers::Offset<flatbuffers::String> event_id) {
    fbb_.AddOffset(RankingEvent::VT_EVENT_ID, event_id);
  }
  void add_deferred_action(bool deferred_action) {
    fbb_.AddElement<uint8_t>(RankingEvent::VT_DEFERRED_ACTION, static_cast<uint8_t>(deferred_action), 0);
  }
  void add_action_ids(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> action_ids) {
    fbb_.AddOffset(RankingEvent::VT_ACTION_IDS, action_ids);
  }
  void add_context(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> context) {
    fbb_.AddOffset(RankingEvent::VT_CONTEXT, context);
  }
  void add_probabilities(flatbuffers::Offset<flatbuffers::Vector<float>> probabilities) {
    fbb_.AddOffset(RankingEvent::VT_PROBABILITIES, probabilities);
  }
  void add_model_id(flatbuffers::Offset<flatbuffers::String> model_id) {
    fbb_.AddOffset(RankingEvent::VT_MODEL_ID, model_id);
  }
  void add_pass_probability(float pass_probability) {
    fbb_.AddElement<float>(RankingEvent::VT_PASS_PROBABILITY, pass_probability, 0.0f);
  }
  explicit RankingEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RankingEventBuilder &operator=(const RankingEventBuilder &);
  flatbuffers::Offset<RankingEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RankingEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<RankingEvent> CreateRankingEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> event_id = 0,
    bool deferred_action = false,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> action_ids = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> context = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> probabilities = 0,
    flatbuffers::Offset<flatbuffers::String> model_id = 0,
    float pass_probability = 0.0f) {
  RankingEventBuilder builder_(_fbb);
  builder_.add_pass_probability(pass_probability);
  builder_.add_model_id(model_id);
  builder_.add_probabilities(probabilities);
  builder_.add_context(context);
  builder_.add_action_ids(action_ids);
  builder_.add_event_id(event_id);
  builder_.add_deferred_action(deferred_action);
  return builder_.Finish();
}

inline flatbuffers::Offset<RankingEvent> CreateRankingEventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *event_id = nullptr,
    bool deferred_action = false,
    const std::vector<uint64_t> *action_ids = nullptr,
    const std::vector<uint8_t> *context = nullptr,
    const std::vector<float> *probabilities = nullptr,
    const char *model_id = nullptr,
    float pass_probability = 0.0f) {
  return reinforcement_learning::messages::flatbuff::CreateRankingEvent(
      _fbb,
      event_id ? _fbb.CreateString(event_id) : 0,
      deferred_action,
      action_ids ? _fbb.CreateVector<uint64_t>(*action_ids) : 0,
      context ? _fbb.CreateVector<uint8_t>(*context) : 0,
      probabilities ? _fbb.CreateVector<float>(*probabilities) : 0,
      model_id ? _fbb.CreateString(model_id) : 0,
      pass_probability);
}

struct RankingEventBatch FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EVENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<RankingEvent>> *events() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RankingEvent>> *>(VT_EVENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENTS) &&
           verifier.Verify(events()) &&
           verifier.VerifyVectorOfTables(events()) &&
           verifier.EndTable();
  }
};

struct RankingEventBatchBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_events(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RankingEvent>>> events) {
    fbb_.AddOffset(RankingEventBatch::VT_EVENTS, events);
  }
  explicit RankingEventBatchBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RankingEventBatchBuilder &operator=(const RankingEventBatchBuilder &);
  flatbuffers::Offset<RankingEventBatch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RankingEventBatch>(end);
    return o;
  }
};

inline flatbuffers::Offset<RankingEventBatch> CreateRankingEventBatch(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RankingEvent>>> events = 0) {
  RankingEventBatchBuilder builder_(_fbb);
  builder_.add_events(events);
  return builder_.Finish();
}

inline flatbuffers::Offset<RankingEventBatch> CreateRankingEventBatchDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<RankingEvent>> *events = nullptr) {
  return reinforcement_learning::messages::flatbuff::CreateRankingEventBatch(
      _fbb,
      events ? _fbb.CreateVector<flatbuffers::Offset<RankingEvent>>(*events) : 0);
}

inline const reinforcement_learning::messages::flatbuff::RankingEventBatch *GetRankingEventBatch(const void *buf) {
  return flatbuffers::GetRoot<reinforcement_learning::messages::flatbuff::RankingEventBatch>(buf);
}

inline const reinforcement_learning::messages::flatbuff::RankingEventBatch *GetSizePrefixedRankingEventBatch(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<reinforcement_learning::messages::flatbuff::RankingEventBatch>(buf);
}

inline bool VerifyRankingEventBatchBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<reinforcement_learning::messages::flatbuff::RankingEventBatch>(nullptr);
}

inline bool VerifySizePrefixedRankingEventBatchBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<reinforcement_learning::messages::flatbuff::RankingEventBatch>(nullptr);
}

inline void FinishRankingEventBatchBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<reinforcement_learning::messages::flatbuff::RankingEventBatch> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRankingEventBatchBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<reinforcement_learning::messages::flatbuff::RankingEventBatch> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flatbuff
}  // namespace messages
}  // namespace reinforcement_learning

#endif  // FLATBUFFERS_GENERATED_RANKINGEVENT_REINFORCEMENT_LEARNING_MESSAGES_FLATBUFF_H_
