<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>

<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Reflection;	
using System.Runtime.CompilerServices;	
using System.Runtime.InteropServices;

<#
	DbgLog("Start");
	try{
		DbgLog($"this.Host == null {this.Host == null}");
		string snRequired = this.Host.ResolveParameterValue("did","pname","SNRequired");
		DbgLog($"SNRequired=({snRequired})");
		string publicKey = this.Host.ResolveParameterValue("did","pname","PublicKey");
		DbgLog($"PublicKey=({publicKey})");

		if(ParseBool(snRequired,false) && !string.IsNullOrWhiteSpace(publicKey)){
			#>[assembly: InternalsVisibleTo("rl.net.cli.test, PublicKey=<#=publicKey#>")]<#	
			DbgLog($"Public key required");
		}
		else{
			#>[assembly: InternalsVisibleTo("rl.net.cli.test")]<#
			DbgLog($"No key required");
		}
	}
	catch(Exception e) {
		DbgLog($"Exception: {e}");
		#>[assembly: InternalsVisibleTo("rl.net.cli.test")]<#
	}
	DbgLog("End");
#>
<#+ 
	public void DbgLog(string line)
	{
		using (StreamWriter sw = File.AppendText("C:\\reinforcement_learning\\t4debug.txt")) 
        {
            sw.WriteLine(DateTime.Now + " rl.net " + line);
        }	
	}

	public bool ParseBool(string boolval, bool defval)
	{
		if(string.IsNullOrWhiteSpace(boolval))
			return defval;
		bool retval = defval;
		bool.TryParse(boolval,out retval);
		return retval;
	}
#>