#define BOOST_TEST_DYN_LINK
#ifdef STAND_ALONE
#define BOOST_TEST_MODULE Main
#endif

#include <boost/test/unit_test.hpp>
#include "test_helpers.h"
#include "mock_helpers.h"

#include "onnx_extension.h"

#include "live_model.h"
#include "configuration.h"
#include "config_utility.h"
#include "factory_resolver.h"

#include <iostream>

namespace r = reinforcement_learning;
namespace u = reinforcement_learning::utility;

void logging_error_fn(const r::api_status& status, void*)
{
  std::cerr << status.get_error_msg() << std::endl;
}

BOOST_AUTO_TEST_CASE(mnist_inference_smoke_test)
{
  // Assume that the onnx factory is already registered via the GlobalConfig fixture in main.cc
  const char* EVENT_ID = "f43dc884-abab-48ac-bc1a-aadb51fd15d4";
  
  // Known "bad" event id (this one samples into the wrong output) - useful for validating the test is actually 
  // doing something.
  //const char* EVENT_ID = "b98f5987-6d93-4562-a1f7-975b7a9884b3";

  const char* JSON_CFG = R"(
  {
    "appid": "onnxtest",
    "model.implementation": "ONNXRUNTIME",
    "onnx.use_unstructured_input": true,
    "onnx.output_name": "Plus214_Output_0",
    "IsExplorationEnabled": true,
    "model.source": "FILE_MODEL_DATA",
    "model_file_loader.file_must_exist": true,
    "EventHubInteractionConnectionString": "Endpoint=sb://localhost:8080/;SharedAccessKeyName=RMSAKey;SharedAccessKey=<ASharedAccessKey>=;EntityPath=interaction",
    "EventHubObservationConnectionString": "Endpoint=sb://localhost:8080/;SharedAccessKeyName=RMSAKey;SharedAccessKey=<ASharedAccessKey>=;EntityPath=observation",
    "InitialExplorationEpsilon": 1.0,
    "model.backgroundrefresh": false
  }
  )";

  const char* TENSOR_NOTATION_CONTEXT = R"({"Input3":"AQAAAAAAAAABAAAAAAAAABwqD4AADk/AAAfPwAAFz8AAHA+AAAQPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF4/AAB+PwAAfj8AAH4/AAB+PwAAcT8AAEY/AABGPwAARj8AAEY/AABGPwAARj8AAEY/AABGPwAAKj8AAFA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACGPgAA5D4AAJA+AADkPgAAIz8AAGM/AAB+PwAAYT8AAH4/AAB+PwAAfj8AAHo/AABlPwAAfj8AAH4/AAAMPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIPQAAhD4AAGA9AACGPgAAhj4AAIY+AABsPgAAqD0AAGw/AAB+PwAA1D4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKY+AAB9PwAAUT8AAJA9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALA9AABpPwAAfz8AAKY+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABPwAAfj8AAG4/AAAwPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsPgAAeT8AAH4/AAB4PgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABT8AAH4/AAA7PwAAoDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAED0AAE0/AAB4PwAAaD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPw+AAB+PwAANj8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJY+AAB7PwAAcD8AAGQ+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJg9AABdPwAAfj8AACY/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA8AABLPwAAfj8AAFs/AAAMPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYPgAAfj8AAH4/AACaPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4PQAAYD8AAH4/AADmPgAAgDsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABT8AAH4/AAB+PwAAUD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdD4AAHI/AAB+PwAAfj8AAFA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPI+AAB+PwAAfj8AAFs/AAAgPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADyPgAAfj8AAE8/AACQPQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="})";
  
  // Note that this is not necessarily the expected output, given sampling
  const int correct_label = 7;

  static auto mock_sender = get_mock_sender(r::error_code::success);
  static auto mock_sender_factory = get_mock_sender_factory(mock_sender.get(), mock_sender.get());

  r::api_status status;
  u::configuration config;
  u::config::create_from_json(JSON_CFG, config, nullptr, &status);

  // TODO: This should be a CMake-configure set value
  config.set("model_file_loader.file_name", "./mnist_data/mnist_model.onnx");
  
  require_success(status);

  r::live_model model(config, logging_error_fn, nullptr, &r::trace_logger_factory, &r::data_transport_factory, &r::model_factory, mock_sender_factory.get());
  model.init(&status);

  require_success(status);

  r::ranking_response response;
  model.choose_rank(EVENT_ID, TENSOR_NOTATION_CONTEXT, response, &status);

  require_success(status);

  size_t chosen_action_id;
  response.get_chosen_action_id(chosen_action_id, &status);

  require_success(status);

  BOOST_REQUIRE_EQUAL(chosen_action_id, correct_label);
}